## fitness-competitions.R by Rohan Maddamsetti

## This file contains analysis code for fitness competitions
## for the DM0-evolution project.
## My guess is that these data are not publishable since it
## it looks like some of the "neutral" competitors are not neutral.
## Save this code since it could be useful later here, or for other
## projects.

library(dplyr)
library(ggplot2)

########################################################################
## Figure 2:
## A) Fitness of evolved clones in DM0 and DM25.
## B) Fitness in DM0 vs. Fitness in DM25 (see if any tradeoff).

## NOTE: This figure still needs work, probably will use clone data instead anyway.

DM0.labels <- read.csv(file.path(proj.dir,
              "data/rohan-formatted/labels-for-DM0-evolved-DM0-fitness.csv"))

DM0.data <- read.csv(file.path(proj.dir,
              "data/rohan-formatted/DM0-evolved-DM0-fitness.csv"))

DM0.data2 <- left_join(DM0.data,DM0.labels) %>%
    mutate(Environment='DM0') %>%
    select(-Set,-Type)

DM25.labels <- read.csv(file.path(proj.dir,
              "data/rohan-formatted/labels-for-DM0-evolved-DM25-fitness.csv"))

DM25.data <- read.csv(file.path(proj.dir,
                                "data/rohan-formatted/DM0-evolved-DM25-fitness.csv"))

DM25.data2 <- left_join(DM25.data,DM25.labels) %>% mutate(Environment='DM25')

founder.labels <- select(pop.clone.labels,Name,Founder) %>% rename(C1=Name)
## put DM0 and DM25 data into a single data frame, and add a Founder column,
## and turn Dilution into a number (Plate Dilution).
Fig2.data <- bind_rows(DM0.data2,DM25.data2) %>%
    left_join(founder.labels) %>%
    mutate(Plate.Dilution = sapply(as.character(Dilution),
                                   function(x) {eval(parse(text=x))}))

## filter out all plates with TMTC colonies, and only analyze one-day competition
## data, and turn Red and White columns (factors) into numeric values
## (since no more TMTC).
## WARNING: as.numeric(Red) is WRONG (gets index of the factor).
## Need to use as.numeric(as.character(Red)) instead.
filtered.Fig2.data <- filter(Fig2.data,Red != 'TMTC') %>%
    filter(White != 'TMTC') %>%
    filter(Day != 'D3') %>% filter(Day != 'D6') %>%
    mutate(Red=as.numeric(as.character(Red))) %>%
    mutate(White=as.numeric(as.character(White)))

## split the data into two data frames for the initial and final day,
## and only include 10^3 dilution D0 and 10^5 dilution D1 data.
Fig2.day0.data <- filter(filtered.Fig2.data,Day=='D0',Dilution=='10^3')
Fig2.day1.data <- filter(filtered.Fig2.data,Day=='D1',Dilution=='10^5')

## change column names of initial.df and final.df before merging them together,
## and drop the Day and Dilution columns.
Fig2.day0.df <- rename(Fig2.day0.data,Red.Pop=C1, White.Pop=C2,
                      Red.0=Red,White.0=White, D.0=Plate.Dilution) %>% select(-Day,-Dilution)
Fig2.day1.df <- rename(Fig2.day1.data,Red.Pop=C1, White.Pop=C2,
                      Red.1=Red,White.1=White, D.1=Plate.Dilution) %>% select(-Day,-Dilution)
## Combine these data frames into a nice format for competition analysis (see Fig7 data).

## This is to help make the Rev column. Reverse if White Pop is a parent clone.
parent.clones <- unique(pop.clone.labels$Parent.Clone)

## Add the Rev and Rep columns.
Fig2.competition.data <- inner_join(Fig2.day0.df,Fig2.day1.df) %>%
    group_by(Environment,Founder,Red.Pop,White.Pop) %>%
    mutate(Rep = row_number()) %>%
    ## The Rev column ensures M_final/M_initial is always evolved/ancestor.
    mutate(Rev=Red.Pop %in% parent.clones)

## by diluting stationary phase culture 1:100 on day 0, there is another
## factor of 100 that multiplies the day 0 plating dilution factor.
Fig2.competition.data2 <- mutate(Fig2.competition.data, D.0=100*D.0) %>%
## always one competitions in these experiments.
    mutate(Mr = log2((D.1/D.0)*Red.1*100^1/Red.0)/1) %>%
    mutate(Mw = log2((D.1/D.0)*White.1*100^1/White.0)/1) %>%
    mutate(W = ifelse(Rev,Mw/Mr,Mr/Mw)) ## reverse log ratio depending on ancestor polarity.
## the data is still grouped_by. so run summarise to get results.

Fig2.results <- summarise(Fig2.competition.data2,
                          Rev=unique(Rev),
                          samplesize=n(),
                          Fitness=mean(W,na.rm=TRUE),
                          W.sd=sd(W,na.rm=TRUE),
                          left.error = Fitness - 1.96*W.sd/sqrt(samplesize),
                          right.error = Fitness + 1.96*W.sd/sqrt(samplesize),
                          Pop = ifelse(Rev,
                                       as.character(White.Pop),
                                       as.character(Red.Pop))) %>% na.omit()


Fig2A.output <- "../results/figures/Fig2A.pdf"

plot.Figure2A <- function (results, output.file) {
    the.plot <- ggplot(results,aes(x=Pop,y=Fitness,color=Rev, label=Pop)) +
        geom_errorbar(aes(ymin=left.error,ymax=right.error),width=0.1, size=1) +
        geom_point(size=1) +
        facet_wrap(~Environment+Founder, scales = "free_x") +
        scale_y_continuous(breaks=seq(0, 2.5, 0.2), limits=c(0.5,2.2)) +
        geom_hline(yintercept=1,linetype="dashed") +
        theme_tufte(base_family='Helvetica') +
        theme(axis.text.x=element_text(angle=45,hjust=1)) +
        theme(axis.title.x=element_blank()) +
        theme(axis.title.y=element_text(hjust=1)) +
        theme(axis.ticks = element_blank(), axis.text.x = element_blank())

    ggsave(the.plot, file=output.file)
}

plot.Figure2B <- function(results,output.file) {
    #' compare fitness in DM0 to fitness in DM25.

    DM0.fitness.results <- filter(results,Environment=='DM0') %>%
        rename(DM0.Fitness = Fitness) %>%
        rename(DM0.W.sd = W.sd) %>%
        rename(DM0.left.error = left.error) %>%
        rename(DM0.right.error = right.error) %>%
        ungroup(Environment) %>%
        select(-Environment,-samplesize,-Rev)

    DM25.fitness.results <- filter(results,Environment=='DM25') %>%
        rename(DM25.Fitness=Fitness) %>%
        rename(DM25.W.sd=W.sd) %>% ungroup(Environment) %>%
        rename(DM25.left.error = left.error) %>%
        rename(DM25.right.error = right.error) %>%
        select(-Environment,-samplesize,-Rev)

    comparison.results <- inner_join(DM0.fitness.results,DM25.fitness.results)

    the.plot <- ggplot(comparison.results,aes(x=DM25.Fitness,y=DM0.Fitness, label=Pop,color='red')) +
        geom_errorbar(aes(ymin=DM0.left.error,ymax=DM0.right.error), width=0.01, size=1) +
        geom_errorbarh(aes(xmin=DM25.left.error,xmax=DM25.right.error), height=0.01, size=1) +
        geom_point(size=1) +
        guides(colour=FALSE) +
        theme_classic(base_family='Helvetica') +
        theme(axis.text.x=element_text(angle=45,hjust=1)) +
        theme(axis.title.y=element_text(hjust=1)) +
        geom_abline(slope=1,intercept=0,linetype='dashed') +
        geom_text_repel(size=4,force=50,hjust=-0.5,vjust=-1,color='black')

    ggsave(the.plot, file=output.file)

}

plot.Figure2A(Fig2.results,file.path(home.dir,"/Desktop/Fig2A.pdf"))
plot.Figure2B(Fig2.results,file.path(home.dir,"/Desktop/Fig2B.pdf"))


## print out calculations to compare to Zack's calculations.
## write.csv(Fig2.competition.data2,file.path(home.dir,"/Desktop/Fig2_fitness.csv")
## write.csv(Fig2.results,file.path(home.dir,"/Desktop/Fig2_fitness_results.csv"))
