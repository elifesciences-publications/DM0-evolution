## Fits a sum of logistic curves to data.
##
## This function fits a sum of two logistic curves to the supplied data, namely
## n(t) = K1 / (1 + ( (K1 - N0) / N0) * exp(-r1 * t)) +
## K2 / (1 + ((K2 - K1)/K1) * exp(-r2 * t)), where
## N(t) is the number of cells (or density) at time t,
## K1, K2 is the carrying capacity on the two carbon sources,
## N0 is the initial cell count or density, and
## r1, r2 are the growth rates on the two carbon sources.
## @param data_t    A vector of timepoints (data_n must also
##                  be provided and be the same length).
## @param data_n    A vector of cell counts or absorbance readings.
## @return          An object of class nls.
## @keywords        growth curves
FitLogisticSum <- function(data_t, data_n) {

    ## make sure that the inputs are valid
    if (!is.vector(data_t) | !is.vector(data_n)) {
        stop("Error: The input data (data_t and data_n) must be vectors.")
    }
    if (!is.numeric(data_t) |!is.numeric(data_n)) {
        stop("Error: The input data (data_t and data_n) must be numeric.")
    }
    if (length(data_t) != length(data_n)) {
        stop("Error: The input data (data_t and data_n) must have the same length.")
    }

    ## put together data
    d <- data.frame(cbind(data_t, data_n))
    names(d) <- c("t", "n")

    ## make some guesses for the initial parameter values
    k1_init <- max(data_n)/2 # first plateau is near half-max
    k2_init <- max(data_n)   # carrying capacity is near the max
    n0_init <- min(data_n[data_n > 0])  # init population size is near the min
    alpha_init <- max(data_t)/2 # guess first plateau is near halftime

    ## make an initial estimate for r
    glm_mod <- stats::glm(n / k2_init ~ t,
                          family = stats::quasibinomial("logit"),
                          data = d)

    r_init <- stats::coef(glm_mod)[[2]]   # slope
    if (r_init <= 0) {
        ## the slope should only be positive for a growing culture, so default
        ## to something small
        r_init <- 0.001
    }

    suppressWarnings(
        nls_mod <- tryCatch(
            minpack.lm::nlsLM(n ~ (k1 / (1 + ( (k1 - n0) / n0) * exp(-r1 * t))) +
                                   (k2 / (1 + ( (k2 - k1) / k1) * exp(-r2 * (t+10)))):I(t>alpha),
                              start = list(k1 = k1_init,
                                           k2 = k2_init,
                                           n0 = n0_init,
                                           r1 = r_init,
                                           r2 = r_init,#),
                                           alpha = alpha_init),
                              control = list(maxiter = 500),
                              lower = c(0, stats::median(data_n), 0, 0, 0,0),
                              upper = c(Inf, Inf, max(data_n), Inf,Inf,Inf),
                              data = d),
            error = function(e) {
                stop("Error: Growthcurver FitLogisticSum cannot fit data.")
            }
        )
    )
    return(nls_mod)
}
