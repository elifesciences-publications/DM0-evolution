 srcs = fill_stack_df(featspl$source)
 srcs = genbankr::fill_stack_df(featspl$source)
 srcs = genbankr::genbankReader::fill_stack_df(featspl$source)
 srcs = fill_stack_df(featspl$source)
fill_stack_df = function(dflist, cols, fill.logical = TRUE, sqinfo = NULL) {
    if(length(dflist) == 0 )
        return(NULL)

    dflist = dflist[sapply(dflist, function(x) !is.null(x) && nrow(x) > 0)]


    allcols = unique(unlist(lapply(dflist, function(x) names(x))))
    basenms = gsub("(.*)(\\.[[:digit:]]+)$", "\\1", allcols)
    nmtab = table(basenms)
    dupnms = names(nmtab[nmtab>1])
    if(any(!dupnms %in% multivalfields))
        warning("Got unexpected multi-value field(s) [ ",
                paste(setdiff(dupnms, multivalfields), collapse = ", "),
                " ]. The resulting column(s) will be of class CharacterList, rather than vector(s). Please contact the maintainer if multi-valuedness is expected/meaningful for the listed field(s).")
    allcols = unique(basenms)
    
    logcols = unique(unlist(lapply(dflist, function(x) names(x)[sapply(x, is.logical)])))
    charcols = setdiff(allcols, logcols)
    
    if(missing(cols))
        cols = allcols
    
    filled = mapply(
        function(x, i) {
        ## have to deal with arbitrary multiple columns
        ## transform them into list columns
        for(nm in dupnms) {
            locs = grep(nm, names(x))
            if(length(locs)) {
                rows = lapply(seq(along = rownames(x)),
                              function(y) unlist(x[y,locs]))
                
                x = x[,-locs]
            } else {
                rows = list(character())
            }
            
            x[[nm]] = rows
        }
        
        
        
        ## setdiff is not symmetric
        missnm = setdiff(charcols, names(x))
        x[,missnm] = NA_character_
        falsenm = setdiff(logcols, names(x))
        x[,falsenm] = FALSE
        x = x[,cols]
        x$temp_grouping_id = i
        x
    }, x = dflist, i = seq(along = dflist), SIMPLIFY=FALSE)
    stk = .simple_rbind_dataframe(filled, "temp")
    stk[["temp"]] = NULL
    
    listcols = which(sapply(names(stk),
                            function(x) is(stk[[x]], "list") ||
                                        x %in% multivalfields))
    stk[listcols] = lapply(listcols, function(i) as(stk[[i]], "CharacterList"))
    mc = names(stk)[!names(stk) %in% c("seqnames", "start", "end", "strand")]
    if(fill.logical) {
        logcols = which(sapply(stk, is.logical))
        stk[,logcols] = lapply(logcols, function(i) {
            dat = stk[[i]]
            dat[is.na(dat)] = FALSE
            dat
        })
    }
    grstk = GRanges(seqnames = stk$seqnames,
                    ranges = IRanges(start = stk$start, end = stk$end),
                    strand = stk$strand )
    
    ## this may be slightly slower, but specifying mcols during
    ## creation appends mcols. to all the column names, super annoying.
    mcols(grstk) = stk[,mc]
    if("translation" %in% names(mcols(grstk))) {
        if(anyNA(grstk$translation)) {
            message("Translation product seems to be missing for ",
                    sum(is.na(grstk$translation)),
                    " of ", length(grstk), " ",
                    grstk$type[1], " annotations. Setting to ''")
            grstk$translation[is.na(grstk$translation)] = ""
        }
        grstk$translation = AAStringSet(grstk$translation)
    }

    if(!is.null(sqinfo))
        seqinfo(grstk) = sqinfo
    grstk
}
 srcs = fill_stack_df(featspl$source)
multivalfields = c("db_xref", "EC_number", "gene_synonym", "old_locus_tag")
 srcs = fill_stack_df(featspl$source)
.simple_rbind_dataframe <- function(dflist, element.colname) {
    numrows = vapply(dflist, nrow, integer(1))
    if (!missing(element.colname)) {
        list.name.col = factor(rep(names(dflist), numrows), levels=names(dflist))
    }
    dflist = dflist[ numrows > 0 ] # ARGH, if some data.frames have zero rows, factors become integers
  #  myunlist = function(x)  base::unlist(x, recursive=FALSE, use.names=FALSE)
    mylapply = base::lapply
    cn = names(dflist[[1]])
    inds = structure(1L:length(cn), names=cn)
    big <- mylapply(inds,
                    function(x) {
        unlist(
                                        # mylapply(dflist, function(y) { y[[x]] }),
            mylapply(dflist, function(y) { .subset2(y, x) }),
            recursive=FALSE, use.names=FALSE)
    })
    if (!missing(element.colname)) {
        big[[element.colname]] = list.name.col
    }
    class(big) <- "data.frame"
    attr(big, "row.names") <- .set_row_names(length(big[[1]]))
    return(big)
}

 srcs = fill_stack_df(featspl$source)
install.packages("GenomicRanges")
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("GenomicRanges", version = "3.8")
a
wd()
getwd()
library(GenomicRanges)
pLCA2 <- import.gff(test)
pLCA2 <- import.gff(test)
hits2
hits2 = hits
hits = hits2
myGranges$gene
myGranges
genes(myGranges)
myGranges$Name
hits
LCAGranges
LCA.genes
amplified.genes.df
test
mat.data
unique(mat.data$Gene)
fig1C.ltee.matrix
names(fig1C.ltee.matrix)
unique(fig1C.ltee.matrix$Gene)
levels(fig1C.DM0.DM25.data$Gene)
head(fig1C.DM0.DM25.data)
head(fig1C.ltee.data)
unique(fig1C.data$Gene)
head(fig1C.data)
fig1C.data$Gene
mut.matrix
class(mut.matrix)
install.packages('seriation')
mut.matrix2
mut.matrix
library(cluster)
similarity.matrix
similarity.matrix
install.packages(kernlab)
install.packages('kernlab')
dimnames(similarity.matrix)
quartz()
plot(similarity.matrix2, col=sc, pch=4) 
similarity.matrix2
mut.matrix2
sc
sc
sc
mut.matrix2
mut.matrix2
mut.matrix
t(mut.matrix)
mut.matrix2
dist(mut.matrix2)
test
sc
sc
sc
install.packages('ggfortify')
install.packages('Growthcurver')
install.packages('growthcurver')
labeled.growth.data
head(IS.mutations)
IS.mutations
parallel.IS.insertions
IS.insertions
81.213
81/213
parallel.IS.insertions
data.frame(parallel.IS.insertions)
parallel.IS.summary
data.frame(IS.summary)
data.frame(parallel.IS.summary)
IS.plot2
IS.plot2
IS.plot2
parallel.IS.summary
parallel.IS.summary
parallel.IS.summary
dataframe(parallel.IS.summary)
data.frame(parallel.IS.summary)
IS.insertions
parallel.IS.insertions
data.frame(parallel.IS.insertions)
parallel.IS.summary
parallel.IS.insertions
parallel.IS.summary
parallel.IS.summary
parallel.IS.summary
parallel.IS.summary
IS.plot
IS.plot
IS.plot
IS.plot
IS.plot
IS.plot
IS.plot
IS.plot
quartz()
LCA.IS.plot
LCA.IS.insertion.CDF.plot
IS.insertions
LCA.IS.insertion.CDF.plot
LCA.IS.insertion.CDF.plot
IS.insertion.CDF.plot
head(evolved.mutations)
bp.parallel.mutations
bp.parallel.mutations
data.frame(bp.parallel.mutations)
parallel.SNP
parallel.dN
parallel.dS
data.frame(bp.parallel.mutations)
parallel.dN
poly.bp.parallel.mutations
poly.parallel.dN
data.frame(poly.parallel.dN)
poly.parallel.MOB
poly.bp.parallel.mutations
poly.bp.parallel.mutations
poly.parallel.dN
head(evolved.mutations)
double.hit.check
double.hit.check
LTEE.MAE.IS.insertions
LTEE.MAE.IS150.hit.pos
IS.insertions
DM0.DM25.IS150.hit.pos
length(IS150.hit.pos.intersect)
IS150.hit.pos.intersect
LTEE.MAE.IS150.hit.pos$Position
DM0.DM25.IS150.hit.pos$Position
head(IS.insertions)
head(LTEE.MAE.IS.insertions)
names(LTEE.MAE.IS150.hit.pos)
LTEE.MAE.IS150.hit.pos
LTEE.MAE.IS150.hit.pos
IS150.hit.pos.intersect
LTEE.MAE.IS.insertions
MAE.IS150
LTEE.IS150
DM0.DM25.IS150.hit.pos
data.frame(DM0.DM25.IS150.hit.pos)
DM0.DM25.pos.intersect
MAE.IS150
22/124
DM0.DM25.IS150.hit.pos
LTEE.MAE.IS150.hit.pos
total.hit.pos
data.frame(total.hit.pos)
LTEE.MAE.IS.insertions
head(MAE.IS150)
DM0.DM25.IS150.hit.pos
LTEE.MAE.IS150.hit.pos
LTEE.MAE.IS150.hit.pos
total.hit.pos
DM0.DM25.IS150.hit.pos
total.hit.pos
total.hit.pos
total.hits
15.525
15/525
total.hit.pos
total.hit.pos
total.hit.pos
total.hit.pos
head(DM0.IS150)
draws
DM0.IS150
total.hit.pos
max.sampled.parallelism
replicates = 100
max.hit.vec
zeros(10)
I(10)
rep(10)
seq(1,10)
max.hit.vev
max.hit.vec
max.hit.vec
max.hit.vec
null.parallel.hits(total.hit.pos)
head(LTEE.IS150)
LTEE.IS150
head(Ara.minus.3.IS150)
head(DM0.DM25.over.time)
head(DM0.DM25.over.time)
head(MAE.IS150.over.time)
head(Ara.minus.3.IS150.over.time)
head(Ara.minus.3.IS150.over.time)
head(LTEE.IS150)
Ara.minus.3.IS150
Ara.minus.3.IS150.over.time
Ara.minus.3.IS150
generation.vec
generation.vec
cur.gen <- 1000
cur.IS150
cur.IS150.total.count
cur.IS150$total.count
Ara.minus.3.IS150.over.time
Ara.minus.3.IS150.total.vec
cur.IS150
MAE.IS150.over.time
DM0.DM25.over.time
install.packages('ggswarm')
mean.log.DM0.r.ratio
bootstrap.results
amp.parallelism
unique(amp.parallelism$Genome)
fig1C.raw.matrix
fig1C.raw.matrix
fig1C.raw.matrix$Gene
levels(fig1C.raw.matrix$Gene)
amps
annotated.amps
head(fig1C.raw.matrix)
tet
test
labeled.annotated.amps
labeled.annotated.amps
labeled.annotated.amps
levels(labeled.annotated.amps)
head(labeled.annotated.amps)
labeled.annotated.amps
head(amp.matrix.df)
amp.matrix.df$Genome
amp.matrix.df
names(fig1C.raw.matrix)
amp.matrix.df
amp.matrix.df$Genome
maeA.AMP.binary.vec
maeA.AMP.binary.vec
maeA.AMP.binary.vec
maeA.AMP.binary.vec
dctA.AMP.binary.vec
amp.matrix.df2
amp.matrix.df2
fig1C.raw.matrix
amp.matrix
amp.matrix
merged.with.amps.matrix
merged.with.amps.matrix
merged.with.amps.matrix
amp.matrix.df
amp.matrix.df
A.minus3.50K.df
ltee.data
non.mutator.ltee.data
ltee.data
filter(ltee.data,PopulationLabel=='Ara-3')
non.mutator.ltee.data
non.mutator.ltee.data
mat.data
matrix.data
quartz()
matrix.figure
matrix.figure
matrix.figure
matrix.figure
matrix.data
install.packages("cowplot")
RI.df
1/c(1,2)
mean(1/c(1,2))
1/mean(1/c(1,2))
DM0.HMRI
DM25.HMRI
HMRI.df
DM0.RI
DM25.RI
RI.df
HMRI.df
DM).invRI
DM0.invRI
test <- filter(A.minus3.50K.df,mutation.count > 0)
sum(test$mutation.count)
treat.muts <- DM0.mutations
future.muts <- A.minus3.50K.df
total.recaps
total.inv.recaps
dice
A
B
AB
Dice.df
Ara.minus.3.IS150
Ara.minus.3.IS150.by.clone
Ara.minus.3.IS150.by.clone
MAE.IS150
warnings()
ggsave("../results/figures/IS-insertions.pdf",IS.plot)
ggsave("../results/figures/IS-insertions.pdf",IS.plot)
IS.plot
IS.plot
IS.plot
IS.insertions
bp.parallel.mutations
parallel.dN
parallel.dS
parallel.INS
parallel.DEL
parallel.MOB
bp.parallel.mutations
poly.parallel.dN
IS.insertions
ggsave("../results/figures/IS-insertions.pdf",IS.plot)
quartz()
IS.plot
IS.plot
IS.plot
IS.plot
IS.plot
IS.plot
total.hit.pos
DM0.DM25.IS150.hit.pos
IS.insertions
quartz()
IS.plot
IS.plot
IS.plot
IS.plot
IS.plot
IS.plot
IS.plot
parallel.IS.plot
parallel.IS.plot
parallel.IS.insertions
parallel.IS.insertions
parallel.IS.insertions
parallel.IS.plot
parallel.IS.plot
parallel.IS.plot
parallel.IS.plot
IS150.rate.plot
Fig5A <- plot.Fig5A.heatmap(annotated.amps,clone.labels)
quartz()
Fig5A
Fig5A <- plot.Fig5A.heatmap(annotated.amps,clone.labels)
Fig5A
Fig5A <- plot.Fig5A.heatmap(annotated.amps,clone.labels)
Fig5A
Fig5A <- plot.Fig5A.heatmap(annotated.amps,clone.labels)
Fig5A
Fig5A <- plot.Fig5A.heatmap(annotated.amps,clone.labels)
Fig5A
Fig5A <- plot.Fig5A.heatmap(annotated.amps,clone.labels)
Fig5A
Fig5A <- plot.Fig5A.heatmap(annotated.amps,clone.labels)
Fig5A
Fig5A <- plot.Fig5A.heatmap(annotated.amps,clone.labels)
Fig5A
Fig5A <- plot.Fig5A.heatmap(annotated.amps,clone.labels)
Fig5A
Fig5A <- plot.Fig5A.heatmap(annotated.amps,clone.labels)
Fig5A
amps
amps2
stacked
stacked
Fig5A <- plot.Fig5A.heatmap(annotated.amps,clone.labels)
Fig5A
labeled.annotated.amps$Genome
labeled.annotated.amps$Genome
labeled.annotated.amps$gene
labeled.annotated.amps$Genome
heatmap
head(evolved.mutations)
citT.mutations
citT.poly.mutations
final.growth.summary
copy/number.results
copy.number.results
null.parallel.hits(total.hit.pos,replicates=100000)
