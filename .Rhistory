750%%500
750%/%500
tested.segments
data.frame(tested.segments)
tested.segments
significant.amplifications
data.frame(significant.amplifications)
11127*70
test
install.packages("genbankr")
source("https://bioconductor.org/biocLite.R")
biocLite("genbankr")
a
REL606.gbk
REL606.gbk
system.file("../REL606.7.gbk", package="genbankr")
pwd
cwd()
cwd
getwd()
REL606.gbk
protein.coding.genes
test.amps
data.frame(test.amps)
source("http://bioconductor.org/biocLite.R")
biocLite("IRanges")
a
test.amps$left.boundary
test.range
data.frame(test.amps)
test.amps
data.frame(test.amps)
columnMetadata(test.ranges)
isS4(test.ranges)
isS4(test.amps)
isS4(data.frame(test.amps))
columnMetadata(test.ranges)
showMethods(test.ranges)
metadata(test.ranges)
mcols(test.ranges)
test.ranges
REL606.genes
library(GRanges)
REL606.genes
test.ranges
findOverlaps(test.ranges,test.ranges)
findOverlaps(REL606.genes,REL606.genes)
source("https://bioconductor.org/biocLite.R")
biocLite("GenomicRanges")
library(GenomicRanges)
test.ranges
test.ranges
test.ranges <- NULL
test.ranges
g.test.ranges
g.test.ranges
hits
Hits$queryHits
hits$queryHits
hits@queryHits
names(hits)
hits
class(hits)
hits@SortedByQueryHits
queryHits(hits)
subjectHits(hits)
REL606.genes
REL606.genes
hits
hits
hits.df
length(REL606.genes)
1:length(REL606.genes)
head(query.df)
subject.df
amplifications
length(g.amp.ranges)
length(g.amp.ranges)
g.amp.ranges
mcols(g.amp.ranges)
subject.df
amplified.genes
mcols(g.amp.ranges)
amplified.genes.df
gene.table
all.genomes
install.packages("purrr")
library(purrr)
all.genomedirs
all.genomedirs
typeof(all.genome.paths)
genome.input.df
)
library(purrr)
 ?map_dfr
map_dfr
map_dfr()
map
test
test <- find.amplifications(file.path(breseq.output.dir,"ZDBp895"),"ZDBp895")
amp.parallelism
amp.parallelism
amp.parallelism
data.frame(amp.parallelism)
amp.parallelism
data.frame(amp.parallelism)
subject.df
amps$gene
amps
annotated.amps
filter(annotated.amps,is.na(gene))
test
test$locus_tag
unique(annotated.amps$genes)
annotated.amps$gene
unique(annotated.amps$geme)
unique(annotated.amps$gene)
install.packages("tidyr")
install.packages("scales")
install.packages('gridExtra')
install.packages("ggthemes")
install.packages('viridis')
 install.packages('DT')
annotated.amps
clone.labels
labeled.annotated.amps
head(labeled.annotated.amps)
labeled.annotated.amps
heatmap
labeled.annotated.amps$gene
order
names(labeled.annotated.amps)
names(annotated.amps)
genome.input.df
labeled.annotated.amps
levels(labeled.annotated.amps$Genome)
labeled.annotated.amps$Genome
warnings()
)
labeled.annotated.amps$Genome
sort(labeled.annotated.amps$Genome)
unique(labeled.annotated.amps)
quartz()
quartz()
heatmap
test.levels <- levels(labeled.annotated.amps$Genome)
test.levels
test.levels <- levels(factor(labeled.annotated.amps$Genome))
test.levels
labeled.annotated.amps$gene %in% c('citT', 'dctA','maeA')
labeled.annotated.amps$gene
labeled.annotated.amps$gene
levels(labeled.annotated.amps$gene)
)
heatmap2
heatmap2
heatmap2
heatmap2
heatmap2
heatmap2
heatmap2
heatmap2
heatmap2
heatmap2 <- plot.Fig4A.heatmap(annotated.amps,clone.labels)
heatmap2
heatmap2 <- plot.Fig4A.heatmap(annotated.amps,clone.labels)
heatmap2
heatmap2 <- plot.Fig4A.heatmap(annotated.amps,clone.labels)
heatmap2
heatmap2 <- plot.Fig4A.heatmap(annotated.amps,clone.labels)
heatmap2
amps
data.frame(amps)
quartz()
stackedbar
amps2
data.frame(amps2)
stackedbar
stackedbar
stackedbar
stackedbar
stacked
amps2
stacked
stacked
results = Fig2.results
results
results = Fig2.results
results
amps
annotated.amps
relevant.copy.numbers
relevant.copy.numbers
relevant.copy.numbers
relevant.copy.numbers
copy.number.table
copy.number.table
copy.number.table
copy.number.table
copy.number.table
copy.number.table
copy.number.table
copy.number.table
install.packages("xml2")
install.packages("roxygen2")
options(repos='http://cran.rstudio.com/')
install.packages('roxygen2')
source("https://bioconductor.org/biocLite.R")
sessionInfo()
options(repos='http://cran.rstudio.com/')
install.packages("data.table")
install.packages("dtplyr")
library(dtplyr)
install.packages("purrr")
install.packages('tidyr')
install.packages('ggplot2')
install.packages('gridExtra')
install.packages('ggthemes')
install.packages('viridis')
install.packages('DT')
setRepositories()
2
available.packages()
source("http://bioconductor.org/biocLite.R")
 'install.packages("BiocInstaller",
  repos="https://bioconductor.org/packages/3.4/bioc")'
 install.packages("BiocInstaller",
repos="https://bioconductor.org/packages/3.4/bioc")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
options(download.file.method="libcurl", url.method="libcurl")
source("https://www.bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
curl http://bioconductor.org/packages/3.1/bioc/src/contrib/PACKAGES
url = "http://bioconductor.org/packages/3.1/bioc/src/contrib/PACKAGES"
download.file(url, tempfile())
source("http://bioconductor.org/biocLite.R")
download.file(url, tempfile(), method="internal")
options(download.file.method="internal")
source("http://bioconductor.org/biocLite.R")
install.packages("BiocInstaller",
  repos="https://bioconductor.org/packages/3.4/bioc")
setRepositories(graphics = getOption("menu.graphics"),
                ind = NULL, addURLs = character())
2
install.packages("BiocInstaller")
chooseBioCmirror()
biocLite()
source("https://bioconductor.org/biocLite.R")
library(httr)
install.packages('httr')
install.packages('httr',dependencies=TRUE, repos='http://cran.rstudio.com/')
options(download.file.method = "wget")
source("https://bioconductor.org/biocLite.R")
genome.input.df
all.genome.paths
amps
test <- amps %% filter(Genome='CZB152')
test <- amps %>% filter(Genome='CZB152')
test <- amps %>% filter(Genome=='CZB152')
test
annotated.amps
copy.number.table
clone.labels
head(annotated.amps)
head(labeled.annotated.amps)
amps
head(amps2)
 amps2$Population
head(amps2)
head(amps2)
amps2
label.these.genes
mutation.types
quartz()
stacked
stacjed
stacked
stacked
stacked
stacked
stacked
stacked
stacked
stacked
stacked
stacked
copy.number.data
mutation.types
head(fig1C.raw.matrix)
head(fig1C.data)
head(fig1C.data)
head(pop.clone.labels)
fig1C.data
fig1C.data
fig1C.data
quartz()
fig1C
names(pop.clone.labels)
head(data.frame(fig1C.data))
fig1C.counts
fig1C.counts
fig1C.counts
fig1C.data2
fig1C.data2
fig1C.counts
levels(fig1C.counts$Gene)
fig1C.ltee.data
)
fig1C.ltee.data
fig1C.lteedata
fig1C.ltee.data
fig1C.ltee.data
LTEE.50K.labels
head(fig1C.ltee.matrix)
head(fig1C.ltee.data)
fig1C.ltee.data
fig1C.data
fig1C.data
fig1C.data
fig1C.data
fig1C.data$Hypermutator
levels(fig1C.data$Hypermutator)
fig1C.data
levels(fig1C.data$Hypermutator)
mutation.types
install.packages("xml2")
annotated.amps
head(annotated.amps)
head(clone.labels)
genome.input.df
head(amps)
head(amps$Genome)
head(genome.input$Genome)
head(genome.input.df$Genome)
genome.input.df$Genome
genome.input.df
head(amps)
amps$Genome
amplified.segments
gnome = genome.input.df$Genome[1]
gnome
breseq.output.dir = genome.input.df$path[1]
breseq.output.dir
table
table.data
table.data[2]
table.data[21]
table.data[23]
xml_text(table.data[22])
xml_text(table.data[23])
field
field
field
field
field
field
field
field
field
field
field
field
field
xml_text(table.data[23])
field
field
field
field
test = xml_text(table.data[23])
test
strsplit(test,"[_]")
strsplit(test,"[_]",fixed=TRUE)
strsplit(test,"\\_",fixed=TRUE)
?strsplit
test
sub(test,"_bases","")
sub(test,"_bases","",fixed=TRUE)
sub(test,"_bases","",fixed=TRUE)
test
str_split(test,"_")
str_split_fixed(test,"_")
str_split_fixed(test,"_",3)
str_split_fixed(test," ")
str_split(test, " ")
e.data
table.data
table.data[23]
test = xml_text(table.data[23])
test
table.data[23]
test = table.data[23]
xml_find_all(test,".//b//text()")
max.readlen
max.readlen+1
max.readlen/2
amplified.segments
gnome
Genome
significant.amplifications
significant.amplifications$Genome
gnome
typeof(gnome)
as.factor(gnome)
typeof(as.factor(gnome))
significant.amplifications
significant.amplifications$Genome
as.character(gnome)
significant.amplifications$Genome
clone.labels
clone.labels$Name
labeled.annotated.amps
head(labeled.annotated.amps)
quartz())
quartz()
stacked2
head(amps)
stacked
anps
amps
stacked2
stacked2
stacked2
stacked2
stacked2
stacked2
stacked2
stacked2
warnings()
home.dir
head(fig1C.raw.matrix)
names(fig1C.raw.matrix)
library(stringr)
head(fig1C.raw.matrix)
test <- names(fig1C.raw.matrix)
test
head(fig1C.raw.matrix)
names(fig1C.raw.matrix)
test = names(fig1C.raw.matrix)
test[2]
test = names(fig1C.raw.matrix)
map(test,function(x) strtrunc(x,5))
map(test,function(x) str_trunc(x,5))
map(test,str_trunc(x,5))
map(test,function (x)) str_trunc(x,width=5,side="right",ellipsis=''))
map(test,function (x) str_trunc(x,width=5,side="right",ellipsis=''))
test = fig1C.raw.matrix
test
test = names(fig1C.raw.matrix)
test
names(pop.clone.labels)
fig1C.data
fig1C.counts
fig1C.ltee.matrix
head(fig1C.ltee.matrix)
LTEE.50K.labels
names(fig1C.ltee.matrix)
fig1C.data$Gene
levels(fig1C.data$Gene)
LTEE.50K.labels
head(fig1C.raw.matrix)
fig1C.raw.matrix[1]
pop.clone.labels
fig1C.data
fig1C.counts
fig1C.counts$Gene
fig1C.ltee.matrix
fig1C.ltee.data
fig1C.ltee.data
fig1C.data
fig1C.ltee.data
fig1C.ltee.data
fig1C.data
fig1C.data
fig1C.data
fig1C.data$Gene
test = fig1C.data %>% filter(is.na(Gene))
test
fig1C.ltee.data
fig1C.data$Gene
fig1C.data$Gene
test = map_chr(fig1C.data$Gene,function(x) is.na(x))
test
unique(test)
mutation.matrix.data
mutation.matrix.data
fig1C.data
fig1C.data$Gene
fig1C.data$Name
fig1C.data$mutation.count
?sparseMatrix
as.integer(fig1C.data$Gene)
install.packages("tidytext")
mat.data
mat.data
mut.matrix
mut.matrix <- NULL
mut.matrix
annotated.amps
clone.labels
