heatmap2
heatmap2
heatmap2
heatmap2
heatmap2 <- plot.Fig4A.heatmap(annotated.amps,clone.labels)
heatmap2
heatmap2 <- plot.Fig4A.heatmap(annotated.amps,clone.labels)
heatmap2
heatmap2 <- plot.Fig4A.heatmap(annotated.amps,clone.labels)
heatmap2
heatmap2 <- plot.Fig4A.heatmap(annotated.amps,clone.labels)
heatmap2
amps
data.frame(amps)
quartz()
stackedbar
amps2
data.frame(amps2)
stackedbar
stackedbar
stackedbar
stackedbar
stacked
amps2
stacked
stacked
results = Fig2.results
results
results = Fig2.results
results
amps
annotated.amps
relevant.copy.numbers
relevant.copy.numbers
relevant.copy.numbers
relevant.copy.numbers
copy.number.table
copy.number.table
copy.number.table
copy.number.table
copy.number.table
copy.number.table
copy.number.table
copy.number.table
install.packages("xml2")
install.packages("roxygen2")
options(repos='http://cran.rstudio.com/')
install.packages('roxygen2')
source("https://bioconductor.org/biocLite.R")
sessionInfo()
options(repos='http://cran.rstudio.com/')
install.packages("data.table")
install.packages("dtplyr")
library(dtplyr)
install.packages("purrr")
install.packages('tidyr')
install.packages('ggplot2')
install.packages('gridExtra')
install.packages('ggthemes')
install.packages('viridis')
install.packages('DT')
setRepositories()
2
available.packages()
source("http://bioconductor.org/biocLite.R")
 'install.packages("BiocInstaller",
  repos="https://bioconductor.org/packages/3.4/bioc")'
 install.packages("BiocInstaller",
repos="https://bioconductor.org/packages/3.4/bioc")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
options(download.file.method="libcurl", url.method="libcurl")
source("https://www.bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
curl http://bioconductor.org/packages/3.1/bioc/src/contrib/PACKAGES
url = "http://bioconductor.org/packages/3.1/bioc/src/contrib/PACKAGES"
download.file(url, tempfile())
source("http://bioconductor.org/biocLite.R")
download.file(url, tempfile(), method="internal")
options(download.file.method="internal")
source("http://bioconductor.org/biocLite.R")
install.packages("BiocInstaller",
  repos="https://bioconductor.org/packages/3.4/bioc")
setRepositories(graphics = getOption("menu.graphics"),
                ind = NULL, addURLs = character())
2
install.packages("BiocInstaller")
chooseBioCmirror()
biocLite()
source("https://bioconductor.org/biocLite.R")
library(httr)
install.packages('httr')
install.packages('httr',dependencies=TRUE, repos='http://cran.rstudio.com/')
options(download.file.method = "wget")
source("https://bioconductor.org/biocLite.R")
genome.input.df
all.genome.paths
amps
test <- amps %% filter(Genome='CZB152')
test <- amps %>% filter(Genome='CZB152')
test <- amps %>% filter(Genome=='CZB152')
test
annotated.amps
copy.number.table
clone.labels
head(annotated.amps)
head(labeled.annotated.amps)
amps
head(amps2)
 amps2$Population
head(amps2)
head(amps2)
amps2
label.these.genes
mutation.types
quartz()
stacked
stacjed
stacked
stacked
stacked
stacked
stacked
stacked
stacked
stacked
stacked
stacked
copy.number.data
mutation.types
head(fig1C.raw.matrix)
head(fig1C.data)
head(fig1C.data)
head(pop.clone.labels)
fig1C.data
fig1C.data
fig1C.data
quartz()
fig1C
names(pop.clone.labels)
head(data.frame(fig1C.data))
fig1C.counts
fig1C.counts
fig1C.counts
fig1C.data2
fig1C.data2
fig1C.counts
levels(fig1C.counts$Gene)
fig1C.ltee.data
)
fig1C.ltee.data
fig1C.lteedata
fig1C.ltee.data
fig1C.ltee.data
LTEE.50K.labels
head(fig1C.ltee.matrix)
head(fig1C.ltee.data)
fig1C.ltee.data
fig1C.data
fig1C.data
fig1C.data
fig1C.data
fig1C.data$Hypermutator
levels(fig1C.data$Hypermutator)
fig1C.data
levels(fig1C.data$Hypermutator)
mutation.types
install.packages("xml2")
annotated.amps
head(annotated.amps)
head(clone.labels)
genome.input.df
head(amps)
head(amps$Genome)
head(genome.input$Genome)
head(genome.input.df$Genome)
genome.input.df$Genome
genome.input.df
head(amps)
amps$Genome
amplified.segments
gnome = genome.input.df$Genome[1]
gnome
breseq.output.dir = genome.input.df$path[1]
breseq.output.dir
table
table.data
table.data[2]
table.data[21]
table.data[23]
xml_text(table.data[22])
xml_text(table.data[23])
field
field
field
field
field
field
field
field
field
field
field
field
field
xml_text(table.data[23])
field
field
field
field
test = xml_text(table.data[23])
test
strsplit(test,"[_]")
strsplit(test,"[_]",fixed=TRUE)
strsplit(test,"\\_",fixed=TRUE)
?strsplit
test
sub(test,"_bases","")
sub(test,"_bases","",fixed=TRUE)
sub(test,"_bases","",fixed=TRUE)
test
str_split(test,"_")
str_split_fixed(test,"_")
str_split_fixed(test,"_",3)
str_split_fixed(test," ")
str_split(test, " ")
e.data
table.data
table.data[23]
test = xml_text(table.data[23])
test
table.data[23]
test = table.data[23]
xml_find_all(test,".//b//text()")
max.readlen
max.readlen+1
max.readlen/2
amplified.segments
gnome
Genome
significant.amplifications
significant.amplifications$Genome
gnome
typeof(gnome)
as.factor(gnome)
typeof(as.factor(gnome))
significant.amplifications
significant.amplifications$Genome
as.character(gnome)
significant.amplifications$Genome
clone.labels
clone.labels$Name
labeled.annotated.amps
head(labeled.annotated.amps)
quartz())
quartz()
stacked2
head(amps)
stacked
anps
amps
stacked2
stacked2
stacked2
stacked2
stacked2
stacked2
stacked2
stacked2
warnings()
home.dir
head(fig1C.raw.matrix)
names(fig1C.raw.matrix)
library(stringr)
head(fig1C.raw.matrix)
test <- names(fig1C.raw.matrix)
test
head(fig1C.raw.matrix)
names(fig1C.raw.matrix)
test = names(fig1C.raw.matrix)
test[2]
test = names(fig1C.raw.matrix)
map(test,function(x) strtrunc(x,5))
map(test,function(x) str_trunc(x,5))
map(test,str_trunc(x,5))
map(test,function (x)) str_trunc(x,width=5,side="right",ellipsis=''))
map(test,function (x) str_trunc(x,width=5,side="right",ellipsis=''))
test = fig1C.raw.matrix
test
test = names(fig1C.raw.matrix)
test
names(pop.clone.labels)
fig1C.data
fig1C.counts
fig1C.ltee.matrix
head(fig1C.ltee.matrix)
LTEE.50K.labels
names(fig1C.ltee.matrix)
fig1C.data$Gene
levels(fig1C.data$Gene)
LTEE.50K.labels
head(fig1C.raw.matrix)
fig1C.raw.matrix[1]
pop.clone.labels
fig1C.data
fig1C.counts
fig1C.counts$Gene
fig1C.ltee.matrix
fig1C.ltee.data
fig1C.ltee.data
fig1C.data
fig1C.ltee.data
fig1C.ltee.data
fig1C.data
fig1C.data
fig1C.data
fig1C.data$Gene
test = fig1C.data %>% filter(is.na(Gene))
test
fig1C.ltee.data
fig1C.data$Gene
fig1C.data$Gene
test = map_chr(fig1C.data$Gene,function(x) is.na(x))
test
unique(test)
mutation.matrix.data
mutation.matrix.data
fig1C.data
fig1C.data$Gene
fig1C.data$Name
fig1C.data$mutation.count
?sparseMatrix
as.integer(fig1C.data$Gene)
install.packages("tidytext")
mat.data
mat.data
mut.matrix
mut.matrix <- NULL
mut.matrix
annotated.amps
clone.labels
amplifications = amps
LCA.gbk = LCA.gb
make_gbrecord
verbose=TRUE
rawgbk = pLCA
  bf = proc.time()["elapsed"]
 feats = rawgbk$FEATURES
 sq = rawgbk$ORIGIN
 typs = sapply(feats, function(x) if (length(x) > 0) 
        x$type[1]
    else NA_character_)
 empty = is.na(typs)
 feats = feats[!empty]
 typs = typs[!empty]
  featspl = split(feats, typs)
 srcs = fill_stack_df(featspl$source)
 srcs = genbankr::fill_stack_df(featspl$source)
 srcs = genbankr::genbankReader::fill_stack_df(featspl$source)
 srcs = fill_stack_df(featspl$source)
fill_stack_df = function(dflist, cols, fill.logical = TRUE, sqinfo = NULL) {
    if(length(dflist) == 0 )
        return(NULL)

    dflist = dflist[sapply(dflist, function(x) !is.null(x) && nrow(x) > 0)]


    allcols = unique(unlist(lapply(dflist, function(x) names(x))))
    basenms = gsub("(.*)(\\.[[:digit:]]+)$", "\\1", allcols)
    nmtab = table(basenms)
    dupnms = names(nmtab[nmtab>1])
    if(any(!dupnms %in% multivalfields))
        warning("Got unexpected multi-value field(s) [ ",
                paste(setdiff(dupnms, multivalfields), collapse = ", "),
                " ]. The resulting column(s) will be of class CharacterList, rather than vector(s). Please contact the maintainer if multi-valuedness is expected/meaningful for the listed field(s).")
    allcols = unique(basenms)
    
    logcols = unique(unlist(lapply(dflist, function(x) names(x)[sapply(x, is.logical)])))
    charcols = setdiff(allcols, logcols)
    
    if(missing(cols))
        cols = allcols
    
    filled = mapply(
        function(x, i) {
        ## have to deal with arbitrary multiple columns
        ## transform them into list columns
        for(nm in dupnms) {
            locs = grep(nm, names(x))
            if(length(locs)) {
                rows = lapply(seq(along = rownames(x)),
                              function(y) unlist(x[y,locs]))
                
                x = x[,-locs]
            } else {
                rows = list(character())
            }
            
            x[[nm]] = rows
        }
        
        
        
        ## setdiff is not symmetric
        missnm = setdiff(charcols, names(x))
        x[,missnm] = NA_character_
        falsenm = setdiff(logcols, names(x))
        x[,falsenm] = FALSE
        x = x[,cols]
        x$temp_grouping_id = i
        x
    }, x = dflist, i = seq(along = dflist), SIMPLIFY=FALSE)
    stk = .simple_rbind_dataframe(filled, "temp")
    stk[["temp"]] = NULL
    
    listcols = which(sapply(names(stk),
                            function(x) is(stk[[x]], "list") ||
                                        x %in% multivalfields))
    stk[listcols] = lapply(listcols, function(i) as(stk[[i]], "CharacterList"))
    mc = names(stk)[!names(stk) %in% c("seqnames", "start", "end", "strand")]
    if(fill.logical) {
        logcols = which(sapply(stk, is.logical))
        stk[,logcols] = lapply(logcols, function(i) {
            dat = stk[[i]]
            dat[is.na(dat)] = FALSE
            dat
        })
    }
    grstk = GRanges(seqnames = stk$seqnames,
                    ranges = IRanges(start = stk$start, end = stk$end),
                    strand = stk$strand )
    
    ## this may be slightly slower, but specifying mcols during
    ## creation appends mcols. to all the column names, super annoying.
    mcols(grstk) = stk[,mc]
    if("translation" %in% names(mcols(grstk))) {
        if(anyNA(grstk$translation)) {
            message("Translation product seems to be missing for ",
                    sum(is.na(grstk$translation)),
                    " of ", length(grstk), " ",
                    grstk$type[1], " annotations. Setting to ''")
            grstk$translation[is.na(grstk$translation)] = ""
        }
        grstk$translation = AAStringSet(grstk$translation)
    }

    if(!is.null(sqinfo))
        seqinfo(grstk) = sqinfo
    grstk
}
 srcs = fill_stack_df(featspl$source)
multivalfields = c("db_xref", "EC_number", "gene_synonym", "old_locus_tag")
 srcs = fill_stack_df(featspl$source)
.simple_rbind_dataframe <- function(dflist, element.colname) {
    numrows = vapply(dflist, nrow, integer(1))
    if (!missing(element.colname)) {
        list.name.col = factor(rep(names(dflist), numrows), levels=names(dflist))
    }
    dflist = dflist[ numrows > 0 ] # ARGH, if some data.frames have zero rows, factors become integers
  #  myunlist = function(x)  base::unlist(x, recursive=FALSE, use.names=FALSE)
    mylapply = base::lapply
    cn = names(dflist[[1]])
    inds = structure(1L:length(cn), names=cn)
    big <- mylapply(inds,
                    function(x) {
        unlist(
                                        # mylapply(dflist, function(y) { y[[x]] }),
            mylapply(dflist, function(y) { .subset2(y, x) }),
            recursive=FALSE, use.names=FALSE)
    })
    if (!missing(element.colname)) {
        big[[element.colname]] = list.name.col
    }
    class(big) <- "data.frame"
    attr(big, "row.names") <- .set_row_names(length(big[[1]]))
    return(big)
}

 srcs = fill_stack_df(featspl$source)
install.packages("GenomicRanges")
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("GenomicRanges", version = "3.8")
a
wd()
getwd()
library(GenomicRanges)
pLCA2 <- import.gff(test)
pLCA2 <- import.gff(test)
hits2
hits2 = hits
hits = hits2
myGranges$gene
myGranges
genes(myGranges)
myGranges$Name
hits
LCAGranges
LCA.genes
amplified.genes.df
