DM0.competition.data2
head(DM0.competition.data2)
data.frame(DM0.competition.data2)
DM0.data
DM0.day0.daya
DM0.day0.data
DM0.data
DM0.data2
filtered.DM0.data
filtered.DM0.data
filtered.DM0.data
head(DM0.data)
filtered.DM0.data
DM0.results
data.frame(DM0.results)
DM0.results
plot.Figure1A <- function (results, output.file) {
    the.plot <- ggplot(results,aes(x=paste(Red.Pop,"vs.", White.Pop),y=Fitness)) +
        geom_errorbar(aes(ymin=left.error,ymax=right.error),width=0.1, size=1) +
        geom_line() +
        geom_point(size=2) +
        #scale_y_conti .... [TRUNCATED] 
)
DM0.results
data.frame(DM0.results)
DM0.results
)
DM0.results
DM0.results$Population
fig6.plot.data
fig6.plot.data
head(DM25.data2)
names(DM25.data2)
names(DM0.data2)
names(DM25.data2)
names(DM0.data2)
names(pop.clone.labels)
pop.clone.labels
head(DM0.data2)
head(DM25.data2)
pop.labels
pop.clone.labels
names(DM0.data2)
names(DM25.data2)
names(DM0.data2)
head(test.data)
head(Fig1.data)
head(Fig1.competition.data2)
Fig1.results
Fig1.results
parent.clones
Fig1.competition.data
head(data.frame(Fig1.competition.data))
Fig1.competition.data2
Fig1.results
Fig1.results
data.frame(Fig1.results)
Fig1.results
Fig1.results
Fig1.results$Pop
Fig1.results$Pop
unique(Fig1.results$Pop)
pop.clone.labels
founder.labels
parent.clones
Fig1.competition.data
Fig1.competition.data2$Red.Pop
Fig1.results
data.frame(Fig1.results)
data.frame(Fig1.results)
Fig1.results
Fig1.results$Pop
Fig1.competition.data2
?write.csv
write.csv(Fig1.competition.data2,"/Users/Rohandinho/Desktop/Fig1_fitness.csv")
install.packages
install.packages("xml2")
projdir
genomedir
genomedir
install.packages('roxygen2')
breseq.output.dir <- testgenomedir
summary.html.h
table
print(table)
table[1]
xml_text(table[1])
xml_text(table[[1]])
xml_text(table)
table.data
xml_text(table.data)
table.data <- xml_find_all(table,'./tr/td')
table.data
mean
mean
nbinom.fit
nbinom.fit$mean
bonferroni.alpha
install.packages("data.table")
y
install.packages("dtplyr")
genome.coverage
genome.coverage
candidate.amplifications
candidate.intervals
candidate.intervals
left.boundaries
right.boundaries
print(right.boundaries)
data.frame(right.boundaries)
data.frame(candidate.amplifications)
corrected.threshold
candidate.amplifications2
data.frame(candidate.amplifications2)
candidate.amplifications2
data.frame(candidate.amplifications2)
binom.test(40,834)
right.boundaries
boundaries
boundaries
data.frame(boundaries)
boundaries
data.frame(boundaries)
candidate.amplifications2
boundaries
 data.frame(boundaries)
boundaries2
tail(boundaries2)
boundaries2
boundaries2
tail(data.frame(boundaries2))
boundaries2
head(data.frame(boundaries2))
boundaries2
data.frame(boundaries2)
boundaries2
nrows(left.boundaries)
nrow(left.boundaries)
nrow(right.boundaries)
)
left.boundaries
right.boundaries
left.boundaries
right.boundaries
amplified.segments
amplified.segments
amplified.segments
amplified.segments
amplified.segments
amplified.segments
amplified.segments
amplified.segments2
amplified.segents
amplified.segments
amplified.segments
amplified.segments
min()
min
mean
genome.coverage.file
install.packages('dtplyr')
)
)
amplified.segments
amplified.segments
amplified.segments
amplified.segments
data.frame(amplified.segments)
nbinom.fit
amplified.segments
data.frame(amplified.segments)
uncorrected.threshold
len%500
mod(750,500)
750%%500
750%/%500
tested.segments
data.frame(tested.segments)
tested.segments
significant.amplifications
data.frame(significant.amplifications)
11127*70
test
install.packages("genbankr")
source("https://bioconductor.org/biocLite.R")
biocLite("genbankr")
a
REL606.gbk
REL606.gbk
system.file("../REL606.7.gbk", package="genbankr")
pwd
cwd()
cwd
getwd()
REL606.gbk
protein.coding.genes
test.amps
data.frame(test.amps)
source("http://bioconductor.org/biocLite.R")
biocLite("IRanges")
a
test.amps$left.boundary
test.range
data.frame(test.amps)
test.amps
data.frame(test.amps)
columnMetadata(test.ranges)
isS4(test.ranges)
isS4(test.amps)
isS4(data.frame(test.amps))
columnMetadata(test.ranges)
showMethods(test.ranges)
metadata(test.ranges)
mcols(test.ranges)
test.ranges
REL606.genes
library(GRanges)
REL606.genes
test.ranges
findOverlaps(test.ranges,test.ranges)
findOverlaps(REL606.genes,REL606.genes)
source("https://bioconductor.org/biocLite.R")
biocLite("GenomicRanges")
library(GenomicRanges)
test.ranges
test.ranges
test.ranges <- NULL
test.ranges
g.test.ranges
g.test.ranges
hits
Hits$queryHits
hits$queryHits
hits@queryHits
names(hits)
hits
class(hits)
hits@SortedByQueryHits
queryHits(hits)
subjectHits(hits)
REL606.genes
REL606.genes
hits
hits
hits.df
length(REL606.genes)
1:length(REL606.genes)
head(query.df)
subject.df
amplifications
length(g.amp.ranges)
length(g.amp.ranges)
g.amp.ranges
mcols(g.amp.ranges)
subject.df
amplified.genes
mcols(g.amp.ranges)
amplified.genes.df
gene.table
all.genomes
install.packages("purrr")
library(purrr)
all.genomedirs
all.genomedirs
typeof(all.genome.paths)
genome.input.df
)
library(purrr)
 ?map_dfr
map_dfr
map_dfr()
map
test
test <- find.amplifications(file.path(breseq.output.dir,"ZDBp895"),"ZDBp895")
amp.parallelism
amp.parallelism
amp.parallelism
data.frame(amp.parallelism)
amp.parallelism
data.frame(amp.parallelism)
subject.df
amps$gene
amps
annotated.amps
filter(annotated.amps,is.na(gene))
test
test$locus_tag
unique(annotated.amps$genes)
annotated.amps$gene
unique(annotated.amps$geme)
unique(annotated.amps$gene)
install.packages("tidyr")
install.packages("scales")
install.packages('gridExtra')
install.packages("ggthemes")
install.packages('viridis')
 install.packages('DT')
annotated.amps
clone.labels
labeled.annotated.amps
head(labeled.annotated.amps)
labeled.annotated.amps
heatmap
labeled.annotated.amps$gene
order
names(labeled.annotated.amps)
names(annotated.amps)
genome.input.df
labeled.annotated.amps
levels(labeled.annotated.amps$Genome)
labeled.annotated.amps$Genome
warnings()
)
labeled.annotated.amps$Genome
sort(labeled.annotated.amps$Genome)
unique(labeled.annotated.amps)
quartz()
quartz()
heatmap
test.levels <- levels(labeled.annotated.amps$Genome)
test.levels
test.levels <- levels(factor(labeled.annotated.amps$Genome))
test.levels
labeled.annotated.amps$gene %in% c('citT', 'dctA','maeA')
labeled.annotated.amps$gene
labeled.annotated.amps$gene
levels(labeled.annotated.amps$gene)
)
heatmap2
heatmap2
heatmap2
heatmap2
heatmap2
heatmap2
heatmap2
heatmap2
heatmap2
heatmap2 <- plot.Fig4A.heatmap(annotated.amps,clone.labels)
heatmap2
heatmap2 <- plot.Fig4A.heatmap(annotated.amps,clone.labels)
heatmap2
heatmap2 <- plot.Fig4A.heatmap(annotated.amps,clone.labels)
heatmap2
heatmap2 <- plot.Fig4A.heatmap(annotated.amps,clone.labels)
heatmap2
amps
data.frame(amps)
quartz()
stackedbar
amps2
data.frame(amps2)
stackedbar
stackedbar
stackedbar
stackedbar
stacked
amps2
stacked
stacked
results = Fig2.results
results
results = Fig2.results
results
amps
annotated.amps
relevant.copy.numbers
relevant.copy.numbers
relevant.copy.numbers
relevant.copy.numbers
copy.number.table
copy.number.table
copy.number.table
copy.number.table
copy.number.table
copy.number.table
copy.number.table
copy.number.table
install.packages("xml2")
install.packages("roxygen2")
options(repos='http://cran.rstudio.com/')
install.packages('roxygen2')
source("https://bioconductor.org/biocLite.R")
sessionInfo()
options(repos='http://cran.rstudio.com/')
install.packages("data.table")
install.packages("dtplyr")
library(dtplyr)
install.packages("purrr")
install.packages('tidyr')
install.packages('ggplot2')
install.packages('gridExtra')
install.packages('ggthemes')
install.packages('viridis')
install.packages('DT')
setRepositories()
2
available.packages()
source("http://bioconductor.org/biocLite.R")
 'install.packages("BiocInstaller",
  repos="https://bioconductor.org/packages/3.4/bioc")'
 install.packages("BiocInstaller",
repos="https://bioconductor.org/packages/3.4/bioc")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
options(download.file.method="libcurl", url.method="libcurl")
source("https://www.bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
curl http://bioconductor.org/packages/3.1/bioc/src/contrib/PACKAGES
url = "http://bioconductor.org/packages/3.1/bioc/src/contrib/PACKAGES"
download.file(url, tempfile())
source("http://bioconductor.org/biocLite.R")
download.file(url, tempfile(), method="internal")
options(download.file.method="internal")
source("http://bioconductor.org/biocLite.R")
install.packages("BiocInstaller",
  repos="https://bioconductor.org/packages/3.4/bioc")
setRepositories(graphics = getOption("menu.graphics"),
                ind = NULL, addURLs = character())
2
install.packages("BiocInstaller")
chooseBioCmirror()
biocLite()
source("https://bioconductor.org/biocLite.R")
library(httr)
install.packages('httr')
install.packages('httr',dependencies=TRUE, repos='http://cran.rstudio.com/')
options(download.file.method = "wget")
source("https://bioconductor.org/biocLite.R")
genome.input.df
all.genome.paths
amps
test <- amps %% filter(Genome='CZB152')
test <- amps %>% filter(Genome='CZB152')
test <- amps %>% filter(Genome=='CZB152')
test
annotated.amps
copy.number.table
clone.labels
head(annotated.amps)
head(labeled.annotated.amps)
amps
head(amps2)
 amps2$Population
head(amps2)
head(amps2)
amps2
label.these.genes
mutation.types
quartz()
stacked
stacjed
stacked
stacked
stacked
stacked
stacked
stacked
stacked
stacked
stacked
stacked
copy.number.data
mutation.types
head(fig1C.raw.matrix)
head(fig1C.data)
head(fig1C.data)
head(pop.clone.labels)
fig1C.data
fig1C.data
fig1C.data
quartz()
fig1C
names(pop.clone.labels)
head(data.frame(fig1C.data))
fig1C.counts
fig1C.counts
fig1C.counts
fig1C.data2
fig1C.data2
fig1C.counts
levels(fig1C.counts$Gene)
fig1C.ltee.data
)
fig1C.ltee.data
fig1C.lteedata
fig1C.ltee.data
fig1C.ltee.data
LTEE.50K.labels
head(fig1C.ltee.matrix)
head(fig1C.ltee.data)
fig1C.ltee.data
fig1C.data
fig1C.data
fig1C.data
fig1C.data
fig1C.data$Hypermutator
levels(fig1C.data$Hypermutator)
fig1C.data
levels(fig1C.data$Hypermutator)
mutation.types
